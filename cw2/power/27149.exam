Q.1 As a security consultant, you have been working on a prototype of the
    attack target; before the product is deployed, the vendor is willing to
    make any alteration necessary (in software or hardware) to prevent the
    attack.  Explain the options available, and which one you would
    recommend.

    Software:
    1] Insertion of no-op instructions randomly in the AES algorithm can
    significantly reduce the correlation values for the AES key bytes. no-op
    instructions break the alignment between the measured power traces and the
    real AES computation. Consequently this reduces the correlation
    co-efficient. However, no-op instructions are easily identified on a power
    trace and with careful filtering they could be removed from the power trace
    during analysis by an adversary.
    2] Shuffle the sbox computation. In the AES SubBytes function, the sbox has
    to be called 16 times to operate on the 16 bytes in the state matrix. If
    you randomise the order in which the bytes are substituted you can reduce
    the correlation between the power trace and the AES computation.
    3] Perform unnecessary computation. By performing random computation whilst
    running the AES algorithm you will disrupt the power trace. This makes it
    much harder for an attacker to identify parts of the power trace that are
    used for AES computation.
    4] Provide a mask. Masking conceals intermediate values from an adversary
    by binding them with a random value namely, the "mask". This value is
    unknown to the adversary and adds an extra level of complexity to the DPA
    attack. In AES you can mask the SubBytes function by producing a whole new
    Rijndael sbox where sbox'[x] = sbox[x] ^ mask. Where ^ denotes the xor
    operator. The same principle applies whereby you can apply the mask to the
    AddRoundKey, MixColumn and ShiftRow parameters by using Boolean addition.
    Using this masking technique will greatly reduce the correlation value
    generated by an adversary as they would simply be correlating against
    incorrect intermediary values!

    Hardware:
    1] Stabilisation of the power trace. The device could be configured with an
    onboard battery as a power source to the SED. The adversary would still be
    supplying power to the unit, but this time it would only be used to
    "top-up" the battery. Any variations in the power consumption (due to AES
    computation) would only be visible to the battery. From an outsiders
    perspective, the power input would be regulated to provide a steady current
    to charge the battery. This is effectively buffering the power consumption
    to mask it from outsiders.

    In summary, I would choose the masking technique as a recommendation. This
    particular countermeasure has good resistance properties to a DPA attack
    and also has the advantage that it could be implemented fairly easily in
    software as it boils down to creating a new sbox and performing some extra
    Boolean addition on the AES round functions' parameters to incorporate the
    mask.

Q.2 The vendor of the attack target opts to replace the 8-bit Intel 8051
    micro-processor with a modern, 32-bit ARM Cortex-M0; they supplement it
    with hardware support for that allows single-cycle operations on 32
    bits of the AES state.  Doing so will naturally reduce the latency of
    encryption or decryption, but they *also* want to know if it might make
    the device more secure wrt.  DPA attacks: what is your assessment, and
    why ?

    Single cycle operation on 32 bits of the AES state will make the device
    more secure with respect to DPA attacks.
    Firstly, single cycle operations on 32 bits of the AES state means that you
    can manipulate a quarter of the state matrix at once. This means that many
    of the intermediary values used to calculate correlation will be overlayed
    over each other on the power trace. From an adversaries perspective this
    makes it very hard to correlate individual AES state bytes with the power
    trace, thus making a DPA attack much harder from a byte level. Instead an
    attacker is forced to guess 32 bits of the key at once. This equates to
    4 * 2^32 possible key values that must be iterated through by the adversary
    as opposed to 16 * 2^8 values with the previous processor that modified
    state bytes individually. This is a somewhat insurmountable task.
    Secondly, power trace spikes are largely caused by accessing memory
    locations in RAM. Pushing and pulling memory to and from RAM requires
    numerous clock cycles. Therefore, as the ARM Cortex-M0 facilitates single
    cycle operations it means that there is never any memory sent to and from
    RAM during manipulation of 32 bits of the state matrix. This will flatten
    the power trace considerably, thus making it harder for an attacker to
    perform a DPA attack.
    In summary, the new ARM Cortex-M0 processor with hardware support for
    single-cycle operations on 32 bits of the AES state provides a definite
    security benefit over that of the original Intel 8051 processor.

Q.3 DPA attacks work because statistics can (to some degree) remove the
    noise within power consumption traces.  Explain the concepts of signal,
    noise and signal-to-noise ratio, and the role each has in a DPA attack
    of this type.

    DPA attacks use analogue electrical signals.
    A signal is simply a carrier of information from one place to another. The signal is categorised as useful information. In the case of DPA attacks the signal is in the form of a power trace.
    Noise is useless data that interferes with the signal. It can be caused by many factors, some environmental (EM radiation for example) and others purposeful (a countermeasure to prevent a DPA attack for example). Too much noise can reduce the ability to read the signal effectively.
    Signal to noise ratio (SNR) as the name suggests, is simply the ratio between the useful signal and the unwanted noise. Generally speaking, the higher the SNR, the better quality the data set and the more information can be extracted.
    In the specific case of a DPA attack, it is very important to have a high SNR to ensure that the power traces collected can be utilised effectively to provide good correlation to the key bytes used in the AES rounds.

Q.8 The vendor of the attack target decides to use AES-192 rather than
    AES-128; their argument is that longer keys will naturally improve
    security in general *and* vs.  DPA attacks.  Explain if and why you
    agree or disagree with this argument.

    A larger key length will increase the general security of the underlying cipher. This is because with a 128 bit key, a brute force algorithm would require 2^128 guesses to obtain the correct key. On the other hand a 192 bit key would take 2^192 guesses. Clearly this is far more guesses in the case of the 192 bit key and therefore in terms of brute force security a 192 bit key offers greater security. When it comes to DPA attacks it will not add a great deal of security for the following reasons:
    AES with a 128 bit key and a 192 bit key differ in 1 main way. A 128 bit key variant of AES performs 10 rounds of repetition of the AES round functions (AddRoundKey, SubBytes, ShiftRow, MixColumn) whilst a 192 bit key performs 12 rounds of repetition.
    The state matrix still remains at the size of 16 bytes due to the fixed block size of 128 bits of AES. This means that the DPA attack can still work on the same intermediary values as before. Consequently the attack will still be able to calculate the underlying 128 bit round key. Once this is found it is simply a case of devolving this key using the 192 bit variant of the Rijndael key schedule to obtain the original 192 bit key.
    So to sum up, the statement is only partially correct. Whilst longer keys do increase the general level of security in terms of a brute force attack, they certainly don't help in the case of a DPA attack.
